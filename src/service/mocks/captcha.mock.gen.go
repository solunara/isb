// Code generated by MockGen. DO NOT EDIT.
// Source: E:\code\golang\isb\src\service\captcha.go
//
// Generated by this command:
//
//	mockgen -source=E:\code\golang\isb\src\service\captcha.go -destination=E:\code\golang\isb\src\service\mocks\captcha.mock.gen.go -package=svcmock
//

// Package svcmock is a generated GoMock package.
package svcmock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCaptchaService is a mock of CaptchaService interface.
type MockCaptchaService struct {
	ctrl     *gomock.Controller
	recorder *MockCaptchaServiceMockRecorder
}

// MockCaptchaServiceMockRecorder is the mock recorder for MockCaptchaService.
type MockCaptchaServiceMockRecorder struct {
	mock *MockCaptchaService
}

// NewMockCaptchaService creates a new mock instance.
func NewMockCaptchaService(ctrl *gomock.Controller) *MockCaptchaService {
	mock := &MockCaptchaService{ctrl: ctrl}
	mock.recorder = &MockCaptchaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaptchaService) EXPECT() *MockCaptchaServiceMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockCaptchaService) Send(ctx context.Context, biz, phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, biz, phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockCaptchaServiceMockRecorder) Send(ctx, biz, phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockCaptchaService)(nil).Send), ctx, biz, phone)
}

// Verify mocks base method.
func (m *MockCaptchaService) Verify(ctx context.Context, biz, phone, inputcode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, biz, phone, inputcode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockCaptchaServiceMockRecorder) Verify(ctx, biz, phone, inputcode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockCaptchaService)(nil).Verify), ctx, biz, phone, inputcode)
}
